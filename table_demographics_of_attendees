-- * Display demographic information on our engaged members, by joining to information from the voterfile. Demographic info includes age, gender, race, education level, household income, urbanicity etc. *
-- Joining to event and participation id in Every Action and Mobilize to be able to filter to members who have completed an event since Sept 2020, and include fields like event owner and event type.


DROP TABLE IF EXISTS coc_reporting.vf_attendee_demographics;
CREATE TABLE coc_reporting.vf_attendee_demographics AS


WITH base AS (
SELECT
	coc_identities.person_id AS person_id
  , coc_member_profile.vb_voterbase_id AS voterbase_id
  , coc_member_profile.vb_smartvan_id AS smartvan_id
  , coc_member_profile.vb_tsmart_first_name AS first_name
  , coc_member_profile.vb_tsmart_last_name AS last_name
  , coc_person_fields.vendor AS vendor
  , coc_person_fields.primary_key AS primary_key
  		-- ^Include to join to Every Action and Mobilize
  , coc_person_fields.updated_at

-- Start with coc_identities as base, since other tables in tmc_activist_pool refer back to it.
FROM tmc_activist_pool.coc_identities

-- coc_member_profile table is join to the voterfile. Inner join since we only want members included in the voter file.
INNER JOIN tmc_activist_pool.coc_member_profile
	ON coc_member_profile.matchbackid = coc_identities.person_id
-- coc_person_fields table is join to records in different platforms. Inner join since we only want members who have records in Every Action and/or Mobilize.
INNER JOIN tmc_activist_pool.coc_person_fields
	ON coc_identities.person_id = coc_person_fields.person_id

WHERE coc_person_fields.vendor IN ('every_action', 'mobilize')
  --AND coc_member_profile.vb_tsmart_state = 'CA'
  	-- !! ^Filter by state. Using to narrow down list to be more workable length, since list is so large.
),


-- Deduping to remove duplicates from joining tmc_activist_pool.coc_person_fields, but keeping multiple records of one person if they are in both Every Action and Mobilize.
deduping1 AS (
SELECT *
  , ROW_NUMBER () OVER (PARTITION BY person_id, vendor ORDER BY updated_at DESC) AS person_dupe
FROM base
),


dedup1 AS (
SELECT *
FROM deduping1
WHERE person_dupe = 1
)
,

-- Join to the voter file
vf_join AS (
SELECT
-- Fields from tmc_activist_pool:
  person_id
  , voterbase_id
  , smartvan_id
  , primary_key
  , first_name
  , last_name
-- Fields from the voter file:
  , ntl_current.vb_tsmart_state AS state
  , ntl_current.vb_tsmart_zip AS zip
  , ntl_current.vb_voterbase_age AS age
	, ntl_current.vb_voterbase_gender AS gender
	, ntl_current.vb_voterbase_race AS race
	, ntl_current.vb_voterbase_marital_status AS marital_status
  , ntl_current.vb_vf_party AS political_party
  , CASE
      	WHEN ntl_current.vb_family_composition_code = 'A' THEN 'Single'
      	WHEN ntl_current.vb_family_composition_code = 'B' THEN 'Single with children'
      	WHEN ntl_current.vb_family_composition_code = 'C' THEN 'Couple'
      	WHEN ntl_current.vb_family_composition_code = 'D' THEN 'Couple with children'
      	WHEN ntl_current.vb_family_composition_code = 'E' THEN 'Multiple generations'
       	WHEN ntl_current.vb_family_composition_code = 'F' THEN 'More than 3 surnames'
        WHEN ntl_current.vb_family_composition_code = 'G' THEN 'Other'
       	ELSE ntl_current.vb_family_composition_code 
    	END AS family_composition
  , ntl_current.vb_number_of_children_in_household AS number_children
  , CASE
      	WHEN ntl_current.vb_homeowner_indicator = 'Y' THEN 'Yes'
      	WHEN ntl_current.vb_homeowner_indicator = 'N' THEN 'No'
      	WHEN ntl_current.vb_homeowner_indicator = 'U' THEN 'Unknown'
       	ELSE ntl_current.vb_homeowner_indicator 
    	END AS homeowner_indicator
  , CASE
  			WHEN ntl_current.vb_household_income_amount < 25 THEN '< $25,000'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 25 AND ntl_current.vb_household_income_amount < 50 THEN '$25,000 - $49,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 50 AND ntl_current.vb_household_income_amount < 75 THEN '$50,000 - $74,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 75 AND ntl_current.vb_household_income_amount < 100 THEN '$75,000 - $99,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 100 AND ntl_current.vb_household_income_amount < 150 THEN '$100,000 - $149,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 150 AND ntl_current.vb_household_income_amount < 200 THEN
'$150,000 - $199,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 150 AND ntl_current.vb_household_income_amount < 200 THEN '$150,000 - $199,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 200 AND ntl_current.vb_household_income_amount < 250 THEN '$200,000 - $249,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 250 AND ntl_current.vb_household_income_amount < 500 THEN '$250,000 - $499,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 500 AND ntl_current.vb_household_income_amount < 750 THEN '$500,000 - $749,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 750 AND ntl_current.vb_household_income_amount < 1000 THEN '$750,000 - $999,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 1000 AND ntl_current.vb_household_income_amount < 2500 THEN '$1,000,000 - $2,499,999'::varchar
  			WHEN ntl_current.vb_household_income_amount >= 2500 THEN '> $2,500,000'::varchar
  			ELSE ntl_current.vb_household_income_amount::varchar
  	END AS household_income_buckets
  , CASE
      	WHEN ntl_current.vb_household_net_worth = 'A' THEN '< $25,000'
      	WHEN ntl_current.vb_household_net_worth = 'B' THEN '$25,000 - $49,999'
      	WHEN ntl_current.vb_household_net_worth = 'C' THEN '$50,000 - $74,999'
      	WHEN ntl_current.vb_household_net_worth = 'D' THEN '$75,000 - $99,999'
      	WHEN ntl_current.vb_household_net_worth = 'E' THEN '$100,000 - $149,999'
       	WHEN ntl_current.vb_household_net_worth = 'F' THEN '$150,000 - $199,999'
        WHEN ntl_current.vb_household_net_worth = 'G' THEN '$200,000 - $249,999'
       	WHEN ntl_current.vb_household_net_worth = 'H' THEN '$250,000 - $499,999'
        WHEN ntl_current.vb_household_net_worth = 'I' THEN '$500,000 - $749,999'
        WHEN ntl_current.vb_household_net_worth = 'J' THEN '$750,000 - $999,999'
        WHEN ntl_current.vb_household_net_worth = 'K' THEN '$1,000,000 - $2,499,999'
        WHEN ntl_current.vb_household_net_worth = 'L' THEN '$2,500,000 - $4,999,999'
        WHEN ntl_current.vb_household_net_worth = 'M' THEN '$5,000,000 - $9,999,999'
        WHEN ntl_current.vb_household_net_worth = 'N' THEN '> $10,000,000'
       	ELSE ntl_current.vb_household_net_worth
    	END AS household_net_worth
  , CASE
      	WHEN ntl_current.vb_education = '0' THEN 'Unknown'::varchar
      	WHEN ntl_current.vb_education = '1' THEN 'High School'::varchar
      	WHEN ntl_current.vb_education = '2' THEN 'Some College'::varchar
      	WHEN ntl_current.vb_education = '3' THEN 'College Graduate'::varchar
      	WHEN ntl_current.vb_education = '4' THEN 'Post Graduate'::varchar
        WHEN ntl_current.vb_education = '6' THEN 'Less than High School Diploma'::varchar
       	ELSE ntl_current.vb_education::varchar
    	END AS highest_education
  , CASE
      	WHEN ntl_current.ts_tsmart_urbanicity = 'R1' THEN '1 Rural (least dense)'
      	WHEN ntl_current.ts_tsmart_urbanicity = 'R2' THEN '2 Rural'
      	WHEN ntl_current.ts_tsmart_urbanicity = 'S3' THEN '3 Suburban'
      	WHEN ntl_current.ts_tsmart_urbanicity = 'S4' THEN '4 Suburban'
      	WHEN ntl_current.ts_tsmart_urbanicity = 'U5' THEN '5 Urban'
        WHEN ntl_current.ts_tsmart_urbanicity = 'U6' THEN '6 Urban (most dense)'
       	ELSE ntl_current.ts_tsmart_urbanicity
    	END AS urbanicity
	, ntl_current.ts_tsmart_partisan_score AS democratic_support_score
  	-- ^A higher score predicts a higher likelihood of supporting the Democratic Party.
	, ntl_current.ts_tsmart_presidential_general_turnout_score AS presidential_turnout_score
  	-- ^A higher score predicts a higher likelihood that the individual will vote in a Presidential General Election. 
  , ntl_current.ts_tsmart_activist_score AS activist_score
  	-- ^A higher score predicts a higher likelihood that the individual is an activist.
  , CASE
    	WHEN ts_tsmart_catholic_raw_score >= ts_tsmart_evangelical_raw_score 
        	AND ts_tsmart_catholic_raw_score >= ts_tsmart_otherchristian_raw_score
          AND ts_tsmart_catholic_raw_score >= ts_tsmart_nonchristian_raw_score
          AND ts_tsmart_catholic_raw_score >= ts_tsmart_jewish_raw_score
          AND ts_tsmart_catholic_raw_score >= ts_tsmart_mormon_raw_score
          AND ts_tsmart_catholic_raw_score >= ts_tsmart_non_religious_raw_score
          THEN 'Catholic'
          ELSE CASE
       WHEN ts_tsmart_evangelical_raw_score >= ts_tsmart_catholic_raw_score
       		AND ts_tsmart_evangelical_raw_score >= ts_tsmart_otherchristian_raw_score
          AND ts_tsmart_evangelical_raw_score >= ts_tsmart_nonchristian_raw_score
          AND ts_tsmart_evangelical_raw_score >= ts_tsmart_jewish_raw_score
          AND ts_tsmart_evangelical_raw_score >= ts_tsmart_mormon_raw_score
          AND ts_tsmart_evangelical_raw_score >= ts_tsmart_non_religious_raw_score
          THEN 'Evangelical'
          ELSE CASE
       WHEN ts_tsmart_otherchristian_raw_score >= ts_tsmart_catholic_raw_score
       		AND ts_tsmart_otherchristian_raw_score >= ts_tsmart_evangelical_raw_score
          AND ts_tsmart_otherchristian_raw_score >= ts_tsmart_nonchristian_raw_score
          AND ts_tsmart_otherchristian_raw_score >= ts_tsmart_jewish_raw_score
          AND ts_tsmart_otherchristian_raw_score >= ts_tsmart_mormon_raw_score
          AND ts_tsmart_otherchristian_raw_score >= ts_tsmart_non_religious_raw_score
          THEN 'Other Christian'
          ELSE CASE
       WHEN ts_tsmart_nonchristian_raw_score >= ts_tsmart_catholic_raw_score
       		AND ts_tsmart_nonchristian_raw_score >= ts_tsmart_evangelical_raw_score
          AND ts_tsmart_nonchristian_raw_score >= ts_tsmart_otherchristian_raw_score
          AND ts_tsmart_nonchristian_raw_score >= ts_tsmart_jewish_raw_score
          AND ts_tsmart_nonchristian_raw_score >= ts_tsmart_mormon_raw_score
          AND ts_tsmart_nonchristian_raw_score >= ts_tsmart_non_religious_raw_score
          THEN 'Non-Christian'
        ELSE CASE
       WHEN ts_tsmart_jewish_raw_score >= ts_tsmart_catholic_raw_score
       		AND ts_tsmart_jewish_raw_score >= ts_tsmart_evangelical_raw_score
          AND ts_tsmart_jewish_raw_score >= ts_tsmart_otherchristian_raw_score
          AND ts_tsmart_jewish_raw_score >= ts_tsmart_nonchristian_raw_score
          AND ts_tsmart_jewish_raw_score >= ts_tsmart_mormon_raw_score
          AND ts_tsmart_jewish_raw_score >= ts_tsmart_non_religious_raw_score
          THEN 'Jewish'
          ELSE CASE
       WHEN ts_tsmart_mormon_raw_score >= ts_tsmart_catholic_raw_score
       		AND ts_tsmart_mormon_raw_score >= ts_tsmart_evangelical_raw_score
      		AND ts_tsmart_mormon_raw_score >= ts_tsmart_otherchristian_raw_score
      		AND ts_tsmart_mormon_raw_score >= ts_tsmart_nonchristian_raw_score
       		AND ts_tsmart_mormon_raw_score >= ts_tsmart_jewish_raw_score
      		AND ts_tsmart_mormon_raw_score >= ts_tsmart_non_religious_raw_score
          THEN 'Mormon'
        ELSE CASE
       WHEN ts_tsmart_non_religious_raw_score >= ts_tsmart_catholic_raw_score
      	 	AND ts_tsmart_non_religious_raw_score >= ts_tsmart_evangelical_raw_score
          AND ts_tsmart_non_religious_raw_score >= ts_tsmart_otherchristian_raw_score
          AND ts_tsmart_non_religious_raw_score >= ts_tsmart_nonchristian_raw_score
          AND ts_tsmart_non_religious_raw_score >= ts_tsmart_jewish_raw_score
          AND ts_tsmart_non_religious_raw_score >= ts_tsmart_mormon_raw_score
          THEN 'Non-Religious'
        ELSE 'Unknown'
        END
        END
        END
        END
        END
        END
     END AS religion_highest_score
  , CASE
  			WHEN religion_highest_score = 'Catholic' THEN ts_tsmart_catholic_raw_score
        WHEN religion_highest_score = 'Evangelical' THEN ts_tsmart_evangelical_raw_score
        WHEN religion_highest_score = 'Other Christian' THEN ts_tsmart_otherchristian_raw_score
        WHEN religion_highest_score = 'Non-Christian' THEN ts_tsmart_nonchristian_raw_score
        WHEN religion_highest_score = 'Jewish' THEN ts_tsmart_jewish_raw_score
        WHEN religion_highest_score = 'Mormon' THEN ts_tsmart_mormon_raw_score
        WHEN religion_highest_score = 'Non-Religious' THEN ts_tsmart_non_religious_raw_score
     	 ELSE NULL
		 END AS religion_score_number
  , ntl_current.predictwise_racial_resentment_score AS racial_resentment_score
  	-- ^The model was built off questions pertaining to black work ethic, historical discrimination, crime, and black protest. The score ranges from 0-100, with 0 meaning an individual is not at all racially resentful, and 100 meaning an individual is extremely racially resentful.
  , ntl_current.tmc_white_antiblack_resentment AS white_antiblack_resentment
  	-- ^Higher scores corresponding to higher likelihood of resentment among white people
  , ntl_current.ts_tsmart_cannabis_legal_support_score AS cannabis_legal_support_score
  	-- ^A higher score indicates a higher likelihood that person supports the legalization of cannabis.
  , ntl_current.vb_purely_social_networker_demi_decile AS purely_social_network_score
  	-- ^Such as Facebook. 1 represents those most likely and 20 represents those least likely.
  , ntl_current.vb_personal_voice_social_networker_demi_decile AS personal_voice_social_network_score
  	-- ^Such as Twitter. 1 represents those most likely and 20 represents those least likely.
  , ntl_current.vb_professional_social_networker_demi_decile AS professional_social_network_score
  	-- ^Such as LinkedIn. 1 represents those most likely and 20 represents those least likely.
      
FROM dedup1

-- Inner join since we only want members included in the voter file.
INNER JOIN ts.ntl_current
 	ON ntl_current.vb_voterbase_id = dedup1.voterbase_id
),


-- Table of event and attendance information from Every Action and Mobilize:
---- These tables are already filtering for participations with role = 'attendee', participation = 'completed', event date since Sept 2020 , event not cancelled.
ea_mob_table AS (
-- Every Action base table: https://platform.civisanalytics.com/spa/#/scripts/sql/100953079
-- Mobilize base table: https://platform.civisanalytics.com/spa/#/scripts/sql/101066205
SELECT
  NVL (ea_eventid::varchar, mob_shiftid) AS event_id
  , NVL (ea_date, mob_date::varchar) AS event_date
  , NVL (ea_eventname, mob_eventname) AS event_name
  , NVL (ea_eventtype, mob_eventtype) AS event_type
	, NVL (ea_eventstate, mob_eventstate) AS event_state
  , mob_eventowner AS event_owner
  , NVL (ea_attendeesid, mob_userid) AS attendee_id
  , NVL (ea_attendeeszip, mob_userzip) AS attendee_zip
FROM coc_reporting.ea_eventattendance

FULL OUTER JOIN coc_reporting.mob_eventattendance
	ON mob_eventattendance.mob_vaneventid = ea_eventattendance.ea_eventid
  AND mob_eventattendance.mob_vanuserid = ea_eventattendance.ea_attendeesid
  -- ^Full Outer Join, since this will includes all records from EA and Mob. This accounts for if there is an event in one platform but not the other.
)


SELECT 
  vf_join.*
  , ea_mob_table.*
  , NVL (pac_2020_state_region.region, rfm_regions.eventregion_byowner) AS event_region
  , allies_events_attendees.allies_event_attendee
FROM vf_join

-- Inner Join because of primary keys, all records from Every Action will join but some records from Mobilize will be dudplicates. Above in ea_mob_table, user ids from EA and Mob were already consolidated into attendee_id. Therefore, using an Inner Join will keep all records where the primary_key matches to an attendee_id, but will exclude primary keys from Mobilize that are duplicates.
INNER JOIN ea_mob_table
  ON ea_mob_table.attendee_id = vf_join.primary_key
-- Joining to table that indicates whether a person has ever attended an Allies event.
-- https://platform.civisanalytics.com/spa/#/scripts/sql/101805527
LEFT JOIN coc_reporting.allies_events_attendees
	ON vf_join.person_id = allies_events_attendees.person_id_allies
-- Joining to table that names region for event owners who are field managers.
-- https://platform.civisanalytics.com/spa/#/scripts/sql/101909788
LEFT JOIN coc_reporting.rfm_regions
  ON ea_mob_table.event_owner = rfm_regions.mob_eventowner
LEFT JOIN coc_reporting.pac_2020_state_region
  ON pac_2020_state_region.state = ea_mob_table.event_state
         
;


-- 15,057,338 unique person ids in coc_identities
---- 5,730,569 unique voterbase ids in coc_member_profile (coc members that match to voter file)


-- Grant access:
GRANT SELECT ON coc_reporting.vf_attendee_demographics TO GROUP coc;
GRANT ALL ON coc_reporting.vf_attendee_demographics TO jharris1;
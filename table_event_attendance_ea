-- * Create a table that pulls together relevant fields from EveryAction for a report on event attendance for the field team. The resulting table includes all unique shifts (event + timeslot) and attendees for that shift. Table also includes event name, date, state, owner, event type, as well as participant zipcode. This table can be queried for specific questions. *


DROP TABLE IF EXISTS coc_reporting.ea_eventattendance;
CREATE TABLE coc_reporting.ea_eventattendance AS


WITH ea_base AS (
SELECT
    coc_events.eventid AS ea_eventid
    , LEFT (coc_events.dateoffsetbegin, CHARINDEX('.', coc_events.dateoffsetbegin) -1) AS ea_date
        -- ^Reformats the date & time to present nicer in the graph. With this, Sisense will condense the date to ##.Month
        -- ^Included for filtering.
    , coc_events.eventname AS ea_eventname
        -- ^Included for filtering.
  	, CASE
    	  WHEN coc_events.eventname LIKE '%_allies' THEN 'Training'
          ELSE coc_events.eventcalendarname
        END AS ea_eventtype
        -- ^Relabeling Allies events from Courtwatch to Training
  			-- ^Included for filtering.
      , coc_locations.state As ea_eventstate 
        -- ^Included for filtering.
  	, coc_eventsignups.vanid AS ea_attendeesid
  	, coc_contacts_mym.firstname AS ea_firstname
  	, coc_contacts_mym.lastname AS ea_lastname
  	, coc_contactsaddresses_mym.zip5 AS ea_attendeeszip 
  	, ROW_NUMBER () OVER (PARTITION BY coc_events.eventid, coc_eventsignups.vanid ORDER BY coc_eventsignupsstatuses.datemodified DESC) AS ea_signupdupe
  	-- ^For deduping eventsignups

  -- Included for deduping addresses below
  	, coc_contactsaddresses_mym.datemodified AS address_datemodified

FROM tmc_van.coc_events

LEFT JOIN tmc_van.coc_eventsignups
	ON coc_events.eventid = coc_eventsignups.eventid
LEFT JOIN tmc_van.coc_eventsignupsstatuses
 	ON coc_eventsignups.eventsignupid = coc_eventsignupsstatuses.eventsignupid
LEFT JOIN tmc_van.coc_eventslocations
	ON coc_eventslocations.eventid = coc_events.eventid
     -- ^In EA, coc_eventslocations table joins event ids to a location ids (which is why I also need to join coc_locations table). However, this table does not include addresses.
LEFT JOIN tmc_van.coc_locations
	ON coc_locations.locationid = coc_eventslocations.locationid
LEFT JOIN tmc_van.coc_contactsaddresses_mym
  ON coc_contactsaddresses_mym.vanid = coc_eventsignups.vanid
LEFT JOIN tmc_van.coc_contacts_mym
  ON coc_contacts_mym.vanid = coc_eventsignups.vanid

WHERE
	coc_eventsignups.eventrolename = 'Attendee'
    -- ^Filter for 'Attendee' only, as opposed to Host or Host Committee.
  AND coc_eventsignupsstatuses.eventstatusname = 'Completed'
    -- ^Filter to only count event sign ups were the contact was labeled as Completed. Otherwise, would include all statuses, including Scheduled and No-Show etc.
  AND coc_events.dateoffsetbegin BETWEEN '2020-09-01 00:00:00' AND (SELECT GETDATE ())
    -- ^Filter between Sept 2020 and the current date for the 2020 General election season.
  AND coc_events.eventname NOT LIKE '%Cancelled%'
    -- ^Filter out cancelled events. I don't believe there is a field in EA for when an event is cancelled. However, this will at least remove events where the event name includes 'Cancelled'.
)

, dedup_signups AS (
SELECT * 
  , ROW_NUMBER () OVER (PARTITION BY ea_eventid, ea_attendeesid ORDER BY address_datemodified DESC) as ea_addressdupe
FROM ea_base
WHERE ea_signupdupe = 1
)
  
  
SELECT
		ea_eventid
    , CASE WHEN ea_eventid IS NOT NULL
  			THEN 'Every Action'
  			ELSE NULL
  		END AS ea_source
    , ea_date
    , ea_eventname
  	, ea_eventtype
    , ea_eventstate 
  	, ea_attendeesid
    , ea_firstname
    , ea_lastname
  	, ea_attendeeszip
  -- ^Selecting only fields that I want in the final table. Removing fields for deduping.
    
FROM dedup_signups
WHERE ea_addressdupe = 1
;

-- Grant access:
GRANT SELECT ON coc_reporting.ea_eventattendance TO GROUP coc;
GRANT ALL ON coc_reporting.ea_eventattendance TO jharris1;
/* Create a table that pulls together relevant fields from EveryAction for a report on event attendance for 
the field team. The resulting table includes all unique shifts (event + timeslot) and attendees for that shift. 
Table also includes event name, date, state, owner, event type, as well as participant zipcode. This table can 
be queried for specific questions. */


DROP TABLE IF EXISTS coc_reporting.ea_eventattendance;
CREATE TABLE coc_reporting.ea_eventattendance AS


WITH base1 AS (
SELECT
    coc_events.eventid AS ea_eventid
    , LEFT (coc_events.dateoffsetbegin, CHARINDEX('.', coc_events.dateoffsetbegin) -1) AS ea_date
        -- ^Reformats the date & time to present nicer in the graph. With this, Sisense will condense the date to ##.Month
        -- ^Included for filtering.
    , CASE
        WHEN coc_events.createdby = '1960269' THEN 'PAC'
        WHEN coc_events.createdby = '1931224' THEN 'c4'
        ELSE NULL
      END AS ea_entity
    , coc_events.eventname AS ea_eventname
        -- ^Included for filtering.
  	, CASE
    	  WHEN coc_events.eventname LIKE '%_allies' THEN 'Training'
          ELSE coc_events.eventcalendarname
        END AS ea_eventtype
        -- ^Relabeling Allies events from Courtwatch to Training
  			-- ^Included for filtering.
    , coc_locations.city AS ea_eventcity
    , coc_locations.state As ea_eventstate
    , coc_locations.zip5 AS ea_eventzip 
        -- ^Included for filtering.
    , ROW_NUMBER () OVER (PARTITION BY coc_events.eventid ORDER BY coc_eventslocations.datemodified DESC) AS rank_eventlocation
        
FROM tmc_van.coc_events
LEFT JOIN tmc_van.coc_eventslocations
	ON coc_eventslocations.eventid = coc_events.eventid
     -- ^In EA, coc_eventslocations table joins event ids to a location ids (which is why I also need to join coc_locations table). However, this table does not include addresses.
LEFT JOIN tmc_van.coc_locations
	ON coc_locations.locationid = coc_eventslocations.locationid

WHERE coc_events.dateoffsetbegin BETWEEN '2020-09-01 00:00:00' AND (SELECT GETDATE ())
    -- ^Filter between Sept 2020 and the current date for the 2020 General election season.
  AND coc_events.eventname NOT LIKE '%Cancelled%'
    -- ^Filter out cancelled events. I don't believe there is a field in EA for when an event is cancelled. However, this will at least remove events where the event name includes 'Cancelled'.
)

, dedup1 AS (
SELECT *
FROM base1
WHERE rank_eventlocation = 1
)

, base2 AS (
SELECT dedup1.*
  	, coc_eventsignups.vanid AS ea_attendeesid
  	, coc_eventsignups.eventrolename AS ea_eventrole
    , ROW_NUMBER () OVER (PARTITION BY ea_eventid, ea_attendeesid /*, ea_eventrole*/ ORDER BY coc_eventsignupsstatuses.datemodified DESC) AS rank_signupstatuses

FROM dedup1
LEFT JOIN tmc_van.coc_eventsignups
	ON dedup1.ea_eventid = coc_eventsignups.eventid
LEFT JOIN tmc_van.coc_eventsignupsstatuses
 	ON coc_eventsignups.eventsignupid = coc_eventsignupsstatuses.eventsignupid

WHERE coc_eventsignupsstatuses.eventstatusname = 'Completed'
)

, dedup2 AS (
SELECT *
FROM base2
WHERE rank_signupstatuses = 1
)

, base3 AS (
SELECT
  dedup2.*
    , coc_contacts_mym.firstname AS ea_firstname
  	, coc_contacts_mym.lastname AS ea_lastname
  	, coc_contactsaddresses_mym.city AS ea_attendeescity
  	, coc_contactsaddresses_mym.state AS ea_attendeesstate
  	, coc_contactsaddresses_mym.zip5 AS ea_attendeeszip 
    , ROW_NUMBER () OVER (PARTITION BY ea_eventid, ea_attendeesid ORDER BY coc_contactsaddresses_mym.datemodified DESC) AS rank_addresses
FROM dedup2
LEFT JOIN tmc_van.coc_contacts_mym
  ON coc_contacts_mym.vanid = dedup2.ea_attendeesid
LEFT JOIN tmc_van.coc_contactsaddresses_mym
  ON coc_contactsaddresses_mym.vanid = dedup2.ea_attendeesid
)

, dedup3 AS (
SELECT *
FROM base3
WHERE rank_addresses = 1
)

, base4 AS (
SELECT
  dedup3.*
  , coc_contactsemails_mym.email AS ea_attendeesemail
  , ROW_NUMBER () OVER (PARTITION BY ea_eventid, ea_attendeesid ORDER BY coc_contactsemails_mym.datemodified DESC) AS rank_email
FROM dedup3
LEFT JOIN tmc_van.coc_contactsemails_mym
  ON dedup3.ea_attendeesid = coc_contactsemails_mym.vanid
)

, dedup4 AS (
SELECT *
FROM base4
WHERE rank_email = 1
)

, base5 AS (
SELECT
  dedup4.*
  , coc_contactsphones_mym.phone AS ea_attendeesphone
  , ROW_NUMBER () OVER (PARTITION BY ea_eventid, ea_attendeesid ORDER BY coc_contactsphones_mym.datemodified DESC) AS rank_phone
FROM dedup4
  LEFT JOIN tmc_van.coc_contactsphones_mym
    ON dedup4.ea_attendeesid = coc_contactsphones_mym.vanid
)

, dedup5 AS (
SELECT *
FROM base5
WHERE rank_phone= 1
)

SELECT
  ea_eventid
    , CASE WHEN ea_eventid IS NOT NULL
  			THEN 'Every Action'
  			ELSE NULL
  		END AS ea_source
  	, ea_entity
    , ea_date
    , ea_eventname
  	, ea_eventtype
    , ea_eventcity
    , ea_eventstate
    , ea_eventzip 
  	, ea_attendeesid
  	, ea_eventrole
    , ea_firstname
    , ea_lastname
    , ea_attendeescity
    , ea_attendeesstate
    , ea_attendeeszip
    , ea_attendeesemail
    , ea_attendeesphone

  FROM dedup5
  WHERE ea_attendeesemail NOT LIKE '%@colorofchange.org'
    -- ^ Filter out COC emails, which we assume are staff and not volunteers.
  AND ea_attendeesemail NOT IN (
    'Meleemewilson@gmail.com'
    , 'jvharris02@gmail.com'
    , 'derrickquarles@yahoo.com'
    , 'cdpark81@gmail.com'
    , 'destanien@icloud.com'
    , 'michidael.ceard@gmail.com'
    , 'anazdin+3@gmail.com'
    , 'Salaah.muhammad@gmail.com'
    , 'carolinefreedman@gmail.com'
    , 'Sadie.Dean16@gmail.com'
    , 'candice@1kwomenstrong.com'
    , 'qmalone26@gmail.com'
    , 'naima.savage@gmail.com'
    , 'cgreer@texasaft.org'
    , 'ebony.hardyallen@gmail.com'
    , 'daniesha93@gmail.com'
    , 'passmorejr@gmail.com'
    , 'chuniq.inpower@gmail.com'
    , 'cpetty1992@gmail.com'
    , 'mnblackjoy@gmail.com'
  )
    -- ^ Filter out personal emails of COC staff that we're seeing in EA

;


-- Grant access:
GRANT SELECT ON coc_reporting.ea_eventattendance TO GROUP coc;
GRANT ALL ON coc_reporting.ea_eventattendance TO jharris1;
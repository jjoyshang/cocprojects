-- * Create a table that lists the people who have attended an event for allies since Sept 2020. Use to filter larger tables that includes attendees to all events, in order to compare the differences in our volunteer base with and without allies. *
-- Connects to the person_id from tmc_activist pool, EA attendees id, and Mobilize user id. However, members may only have one or two of these ids.

---- ATTENTION!! Mobilize has not been syncing to tmc_activist_pool.coc_person_fields since 7/15/20 (tested 12/01/20). Therefore, people just in Mobilize NOT EA have nothing to join to in tmc_activist_pool.


DROP TABLE IF EXISTS coc_reporting.allies_events_attendees;
CREATE TABLE coc_reporting.allies_events_attendees AS


WITH ea_mob_table AS (
-- Table of event and attendance information from Every Action and Mobilize:
---- These tables are already filtering for participations with role = 'attendee', participation = 'completed', event date since Sept 2020 , event not cancelled.
-- Every Action base table: https://platform.civisanalytics.com/spa/#/scripts/sql/100953079
-- Mobilize base table: https://platform.civisanalytics.com/spa/#/scripts/sql/101066205
SELECT
  NVL (ea_eventid::varchar, mob_shiftid) AS event_id
  --, NVL (ea_date, mob_date::varchar) AS event_date
  , NVL (ea_eventname, mob_eventname) AS event_name
  --, NVL (ea_eventtype, mob_eventtype) AS event_type
  --, mob_eventowner AS event_owner
  , NVL (ea_attendeesid, mob_userid) AS combined_attendee_id
  , ea_attendeesid
  , mob_userid
  , NVL (ea_firstname, mob_firstname) AS attendee_firstname
  , NVL (ea_lastname, mob_lastname) AS attendee_lastname

FROM coc_reporting.ea_eventattendance

FULL OUTER JOIN coc_reporting.mob_eventattendance
	ON mob_eventattendance.mob_vaneventid = ea_eventattendance.ea_eventid
  AND mob_eventattendance.mob_vanuserid = ea_eventattendance.ea_attendeesid
  -- ^Full Outer Join, since this will includes all records from EA and Mob. This accounts for if there is an event in one platform but not the other.
),


activist_pool AS (
SELECT
	coc_identities.person_id AS person_id
  , coc_member_profile.voterbase_id AS voterbase_id
  --, coc_member_profile.vb_smartvan_id AS smartvan_id
  		-- ^Not seeing a smartvan in updated schema as of 12/01/2020
  --, coc_person_fields.first_name AS first_name
  --, coc_person_fields.last_name AS last_name
  , coc_person_fields.vendor
  , coc_person_fields.primary_key
  		-- ^Include to join to Every Action and Mobilize
  , coc_person_fields.updated_at

-- Start with coc_identities as base, since other tables in tmc_activist_pool refer back to it.
FROM tmc_activist_pool.coc_identities

-- Left Joins to include people not in the voter file. Maybe could be Inner Join, if all people in other tables are included in coc_identities already.
LEFT JOIN tmc_activist_pool.coc_member_profile
	ON coc_member_profile.matchbackid = coc_identities.person_id
LEFT JOIN tmc_activist_pool.coc_person_fields
	ON coc_identities.person_id = coc_person_fields.person_id

WHERE coc_person_fields.vendor IN ('every_action', 'mobilize')
  --AND coc_person_fields.updated_at BETWEEN '2020-09-01 00:00:00' AND (SELECT GETDATE ())
),


-- Deduping to remove duplicates from joining tmc_activist_pool.coc_person_fields, but keeping multiple records of one person if they are in both Every Action and Mobilize.
deduping1 AS (
SELECT *
  , ROW_NUMBER () OVER (PARTITION BY person_id, vendor ORDER BY updated_at DESC) AS person_dupe
FROM activist_pool
),


dedup1 AS (
SELECT *
FROM deduping1
WHERE person_dupe = 1
),


join_events_people AS (
SELECT 
  person_id
  , voterbase_id
  , combined_attendee_id
  , ea_attendeesid
  , mob_userid
  , attendee_firstname
  , attendee_lastname
  , CASE
  		WHEN event_name LIKE '%_allies'THEN 'Yes'
      ELSE 'No'
    END AS allies_event_attendee
FROM ea_mob_table

-- All records from dedup1 (originating from the activist pool) have a primary key and therefore should join fully with just a Left Join.
LEFT JOIN dedup1
  ON ea_mob_table.combined_attendee_id = dedup1.primary_key
),


-- Deduping to only pull one record for each person, ordering by an event where Yes they attended an allies event first (so if they attended any ally event, they will be Yes).
deduping2 AS (
SELECT *
  , ROW_NUMBER () OVER (PARTITION BY ea_attendeesid, mob_userid ORDER BY allies_event_attendee ASC) AS event_dupe
FROM join_events_people
)


SELECT 
	person_id AS person_id_allies
  , voterbase_id AS voterbase_id_allies
  , combined_attendee_id
  , ea_attendeesid AS ea_attendeesid_allies
  , mob_userid AS mob_userid_allies
  , attendee_firstname AS attendee_firstname_allies
  , attendee_lastname AS attendee_lastname_allies
  , allies_event_attendee
FROM deduping2
WHERE event_dupe = 1
	AND allies_event_attendee = 'Yes'
;


-- Grant access:
GRANT SELECT ON coc_reporting.allies_events_attendees TO GROUP coc;
GRANT ALL ON coc_reporting.allies_events_attendees TO jharris1;
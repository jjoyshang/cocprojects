-- * Create a table combining event and attendance data from EveryAction and Mobilize PAC & c4. Makes it easier to create reports with event data joining both sources *

-- Every Action base table: https://platform.civisanalytics.com/spa/#/scripts/sql/100953079
-- Mobilize base table: https://platform.civisanalytics.com/spa/#/scripts/sql/101066205

GRANT SELECT ON coc_reporting.rfm_regions TO GROUP coc;
GRANT ALL ON coc_reporting.rfm_regions TO jharris1;

DROP TABLE IF EXISTS coc_reporting.ea_mob_eventattendance;
CREATE TABLE coc_reporting.ea_mob_eventattendance AS

-- Where there are two versions of a field, I am selecting EA first. This is because Mob events stop syncing to EA 24 hours after the event occurs. Therefore, we encourage staff to update events in EA and view that data as more up-to-date. Where there is no EA field I use a Mob field OR use a Null function (NVL) to pull from the EA table first, then the Mob table.
WITH base AS (SELECT
	NVL (ea_eventid::varchar, mob_shiftid) AS unique_eventid
  		-- ^Mobilize reference is the shiftid, which is event id plus timeslot id. This is beccause of the weird way Mobilize data is structured, where timeslots are shared across multiple events.
  , NVL (ea_source, mob_source) AS sourceplatform
  , CASE 
      WHEN mob_source = 'Mobilize PAC' THEN 'PAC'
      WHEN mob_source = 'Mobilize C4' THEN 'c3 c4'
      ELSE NULL
    END AS entity
  , NVL (ea_date, mob_date::varchar) AS event_date
  , NVL (ea_eventname, mob_eventname) AS event_name
  , NVL (ea_eventtype, mob_eventtype) AS event_type
	, NVL (ea_eventstate, mob_eventstate) AS event_state
  , mob_eventowner AS event_owner
  , NVL (ea_attendeesid, mob_userid) AS attendee_id
  , NVL (ea_firstname, mob_firstname) AS attendee_firstname
  , NVL (ea_lastname, mob_lastname) AS attendee_lastname
  , NVL (ea_attendeeszip, mob_userzip) AS attendee_zip

FROM coc_reporting.ea_eventattendance

FULL OUTER JOIN coc_reporting.mob_eventattendance
	ON mob_eventattendance.mob_vaneventid = ea_eventattendance.ea_eventid
  AND mob_eventattendance.mob_vanuserid = ea_eventattendance.ea_attendeesid
  -- ^Full Outer Join, since this will includes all records from EA and Mob. This accounts for if there is an event in one platform but not the other.
),


-- Base table that names region for event owners.
---- https://platform.civisanalytics.com/spa/#/scripts/sql/101909788
-- CTE to update end date in this table as the date when run, in order to join with event date below.
temp_region AS (
SELECT
  *
  , CASE WHEN rfm_regions.end_date IS NULL THEN ((SELECT GETDATE ()))
  		ELSE rfm_regions.end_date
  	END AS end_date_dailyupdate
FROM coc_reporting.rfm_regions
)


SELECT 
	base.*
  , NVL(temp_region.region, 'Unknown') AS rfm_region
  		-- ^Simplifying this field. Formally referenced location of the event as "event_region". Now only reflects the region of the event owner, as defined by how staff are organized.
  --, event_attendees_ally_flag.allies_event_attendee
  , ROW_NUMBER () OVER (PARTITION BY attendee_id ORDER BY event_date DESC) AS latest_attendance_rank
  		-- ^Adding in order to easily be able to filter for the latest record when I want a count of unique attendees, not all attendances.
FROM base

/*LEFT JOIN coc_reporting.event_attendees_ally_flag
	ON base.attendee_id = event_attendees_ally_flag.combined_attendee_id*/
-- Joining to CTE with RFM Regions. Event date is within the field manager's dates for the region.
LEFT JOIN temp_region
  ON base.event_owner = temp_region.event_owner
  AND base.event_date >= temp_region.start_date
  AND base.event_date < temp_region.end_date_dailyupdate

;

-- Grant access:
GRANT SELECT ON coc_reporting.ea_mob_eventattendance TO GROUP coc;
GRANT ALL ON coc_reporting.ea_mob_eventattendance TO jharris1;
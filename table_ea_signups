/*  Create a table that pulls together relevant fields from EveryAction of people signed up for an event. I am describing a
'sign up' as being marked with any status, including 'Scheduled', 'Sched-Web', 'Invited', 'Cancelled', 'Confirmed',
'Conf Twice', 'No Show', and 'Completed'.

The table brings in Event Owner information from Mobilize America, which is not available in EveryAction.
*/

DROP TABLE IF EXISTS coc_reporting.ea_eventsignups;
CREATE TABLE coc_reporting.ea_eventsignups AS


WITH base1 AS (
SELECT
    coc_events.eventid AS ea_eventid
    --, LEFT (coc_events.dateoffsetbegin, CHARINDEX('.', coc_events.dateoffsetbegin) -1) AS ea_date
        -- ^Reformats the date & time to present nicer in the graph. With this, Sisense will condense the date to ##.Month
        -- ^Included for filtering.
    , CASE
        WHEN coc_events.createdby = '1960269' THEN 'PAC'
        WHEN coc_events.createdby = '1931224' THEN 'c4'
        ELSE NULL
      END AS entity
    , coc_events.eventname AS event_name
        -- ^Included for filtering.
  	, CASE
    	  WHEN coc_events.eventname LIKE '%_allies' THEN 'Training'
          ELSE coc_events.eventcalendarname
        END AS event_type
        -- ^Relabeling Allies events from Courtwatch to Training
  			-- ^Included for filtering.
    , coc_locations.city AS event_city
    , coc_locations.state As event_state
    , coc_locations.zip5 AS event_zip 
        -- ^Included for filtering.
    , ROW_NUMBER () OVER (PARTITION BY coc_events.eventid ORDER BY coc_eventslocations.datemodified DESC) AS rank_eventlocation
        
FROM tmc_van.coc_events
LEFT JOIN tmc_van.coc_eventslocations
	ON coc_eventslocations.eventid = coc_events.eventid
     -- ^In EA, coc_eventslocations table joins event ids to a location ids (which is why I also need to join coc_locations table). However, this table does not include addresses.
LEFT JOIN tmc_van.coc_locations
	ON coc_locations.locationid = coc_eventslocations.locationid

WHERE coc_events.dateoffsetbegin BETWEEN '2020-09-01 00:00:00' AND (SELECT GETDATE ())
    -- ^Filter between Sept 2020 and the current date for the 2020 General election season.
  AND coc_events.eventname NOT LIKE '%Cancelled%'
    -- ^Filter out cancelled events. I don't believe there is a field in EA for when an event is cancelled. However, this will at least remove events where the event name includes 'Cancelled'.
)

, dedup_events AS (
SELECT *
FROM base1
WHERE rank_eventlocation = 1
)


, mobc4 AS (
SELECT 
  van_id
  , (events.owner__family_name || ', ' || events.owner__given_name) AS mob_eventowner
  , ROW_NUMBER () OVER (PARTITION BY van_id ORDER BY van_events.modified_date DESC) AS rank_vanjoin
FROM coc_mobilize_c4.coc_mobilize_c4_van_events AS van_events
LEFT JOIN coc_mobilize_c4.coc_mobilize_c4_events AS events
  ON van_events.event_id = events.id

--WHERE events.created_date BETWEEN '2022-02-01' AND (SELECT GETDATE ()) -- ! For testing !
--WHERE events.created_date BETWEEN '2020-09-01' AND (SELECT GETDATE ())
)

, c4_dedup AS (
SELECT *
FROM mobc4
WHERE rank_vanjoin = 1
)

, mobpac AS (
SELECT 
  van_id
  , (events.owner__family_name || ', ' || events.owner__given_name) AS mob_eventowner
  , ROW_NUMBER () OVER (PARTITION BY van_id ORDER BY van_events.modified_date DESC) AS rank_vanjoin
FROM  coc_mobilize_pac.van_events
LEFT JOIN coc_mobilize_pac.events
  ON van_events.event_id = events.id

--WHERE events.created_date BETWEEN '2022-02-01' AND (SELECT GETDATE ()) -- ! For testing !
--WHERE events.created_date BETWEEN '2020-09-01' AND (SELECT GETDATE ())
)

, pac_dedup AS (
SELECT *
FROM mobpac
WHERE rank_vanjoin = 1
)

, mob_combined AS (
SELECT van_id, mob_eventowner FROM c4_dedup
UNION
SELECT van_id, mob_eventowner FROM pac_dedup
)

, events AS (
SELECT 
  ea_eventid
  , entity
  , event_name
  , event_type
  , event_city
  , event_state 
  , event_zip
  , mob_eventowner
FROM dedup_events
LEFT JOIN mob_combined
  ON mob_combined.van_id = dedup_events.ea_eventid
)


, attendees AS (
SELECT DISTINCT
  events.*
  , signups.eventshiftid AS event_shiftid
  , TO_TIMESTAMP(shifts.datetimeoffsetbegin, 'YYYY-MM-DD HH24:MI:SS') AS event_shiftdate
  /* For events with multiple shifts, the shift date is more accurate than the overall event date. 
  Formatting from varchar to timestamp. */
  , signups.eventsignupid AS attendee_signupid
  , signups.inputtypeid
  , signups.vanid AS ea_attendeesid
  , signups.eventrolename AS attendee_role
FROM events
LEFT JOIN tmc_van.coc_eventsignups AS signups
	ON events.ea_eventid = signups.eventid
LEFT JOIN tmc_van.coc_eventshifts AS shifts
  ON signups.eventshiftid = shifts.eventshiftid
)

, base3 AS (
  SELECT
  attendees.*
  , coc_contacts_mym.firstname AS ea_firstname
  , coc_contacts_mym.lastname AS ea_lastname
  , coc_contactsaddresses_mym.city AS ea_attendeescity
  , coc_contactsaddresses_mym.state AS ea_attendeesstate
  , coc_contactsaddresses_mym.zip5 AS ea_attendeeszip 
  , ROW_NUMBER () OVER (PARTITION BY ea_eventid, ea_attendeesid ORDER BY coc_contactsaddresses_mym.datemodified DESC) AS rank_addresses
FROM attendees
LEFT JOIN tmc_van.coc_contacts_mym
  ON coc_contacts_mym.vanid = attendees.ea_attendeesid
LEFT JOIN tmc_van.coc_contactsaddresses_mym
  ON coc_contactsaddresses_mym.vanid = attendees.ea_attendeesid
) 

, dedup3 AS (
SELECT *
FROM base3
WHERE rank_addresses = 1
)

, base4 AS (
SELECT
  dedup3.*
  , coc_contactsemails_mym.email AS ea_attendeesemail
  , ROW_NUMBER () OVER (PARTITION BY ea_eventid, ea_attendeesid ORDER BY coc_contactsemails_mym.datemodified DESC) AS rank_email
FROM dedup3
LEFT JOIN tmc_van.coc_contactsemails_mym
  ON dedup3.ea_attendeesid = coc_contactsemails_mym.vanid
)

, dedup4 AS (
SELECT *
FROM base4
WHERE rank_email = 1
)

, base5 AS (
SELECT
  dedup4.*
  , coc_contactsphones_mym.phone AS ea_attendeesphone
  , ROW_NUMBER () OVER (PARTITION BY ea_eventid, ea_attendeesid ORDER BY coc_contactsphones_mym.datemodified DESC) AS rank_phone
FROM dedup4
  LEFT JOIN tmc_van.coc_contactsphones_mym
    ON dedup4.ea_attendeesid = coc_contactsphones_mym.vanid
)

, dedup5 AS (
SELECT *
FROM base5
WHERE rank_phone= 1
)

, attendees_clean AS (
SELECT
  dedup5.*
FROM dedup5
WHERE ea_attendeesemail NOT LIKE '%@colorofchange.org'
    -- ^ Filter out COC emails, which we assume are staff.
  AND ea_attendeesemail NOT IN (
    'Meleemewilson@gmail.com'
    , 'jvharris02@gmail.com'
    , 'derrickquarles@yahoo.com'
    , 'cdpark81@gmail.com'
    , 'destanien@icloud.com'
    , 'michidael.ceard@gmail.com'
    , 'anazdin+3@gmail.com'
    , 'Salaah.muhammad@gmail.com'
    , 'carolinefreedman@gmail.com'
    , 'Sadie.Dean16@gmail.com'
    , 'candice@1kwomenstrong.com'
    , 'qmalone26@gmail.com'
    , 'naima.savage@gmail.com'
    , 'cgreer@texasaft.org'
    , 'ebony.hardyallen@gmail.com'
    , 'daniesha93@gmail.com'
    , 'passmorejr@gmail.com'
    , 'chuniq.inpower@gmail.com'
    , 'cpetty1992@gmail.com'
    , 'mnblackjoy@gmail.com'
  ) -- ^ Filter out personal emails of COC staff that we're seeing in EA
)

, base AS (
SELECT
  attendees_clean.*
  , statuses.eventsignupseventstatusid AS attendee_signupsstatusid
  , CASE
        WHEN statuses.createdby = '1960269' THEN 'Mobilize PAC'
        WHEN statuses.createdby = '1931224' THEN 'Mobilize c4'
        WHEN statuses.createdby = '1399286' THEN 'ThruText'
        WHEN statuses.createdby = '1781028' THEN 'Open VPB'
        ELSE NULL
      END AS temp_statuses_api
    -- ^ Reformatting statuses created by API to the platform name
  , NVL(contacttypes.contacttypename, temp_statuses_api, input.inputtypename)  AS status_createdby_temp
    /* ^ Cascading to the most specific name of how a status is created. The most specific is the contacttypename which shows
    the type of real contact, such as a One on One. The next the name of the API that created the status, if relevant. Last 
    is inputtypename which shows VPB, Bulk, Manual, or API. */
  , CASE WHEN temp_statuses_api IS NULL
      THEN NVL(contacts.canvassedby, statuses.createdby)
      ELSE NULL
    END AS status_creatorid
    /* ^ First, only taking user ids when the status creator is NOT an api. If it is an api, I will get the api id.
    Then cascading to the most specific user of which person created a status. The contacts.canvassedby shows who talked to the 
    member in a real contact, such as a One on One. The statuses.createdby shows the name of the EA user who added
    the status. */
  , CASE WHEN status_createdby_temp = 'API' AND status_creatorid IS NOT NULL THEN 'Manual'
      ELSE status_createdby_temp
      END AS status_createdby
    /* ^ Seeing in the backend that Manual statuses are erroneously being called API, when in EA they are manually added by a 
    user. This field is fixing this by saying, when the status is created by API but it was created by a user in EA, call
    it 'Manual' instead. */
  , statuses.eventstatusname AS attendee_status
  , NVL(contacts.datecanvassed, statuses.datecreated) AS status_datecreated
    /* ^ Cascading the most accurate date to least accurate. For a real contact, the contacts.datecanvassed will show when we
    talked to the member. If not, it will show the date the status was added.*/
  , statuses.datemodified AS status_datemodified
  , CASE WHEN 
      attendee_status IN ('No Show', 'Completed') THEN
        ROW_NUMBER () OVER (PARTITION BY ea_eventid, event_shiftid, attendees_clean.ea_attendeesid ORDER BY status_datemodified DESC)
      ELSE 1
    END AS noshow_completes_rank
      /* For No Shows or Completes, I only want the most recently updated status. I do not want duplicates if this has been
        changed or added multiple times.
     Rank them with the most recently updated as 1. Every other status is also 1.
      In the next CTE I fill filter this. */
FROM attendees_clean
LEFT JOIN tmc_van.coc_eventsignupsstatuses AS statuses
	ON attendees_clean.attendee_signupid = statuses.eventsignupid
LEFT JOIN tmc_van.coc_contactscontacts_mym AS contacts
  ON statuses.contactscontactid = contacts.contactscontactid
LEFT JOIN tmc_van.tsm_tmc_inputtypes AS input
  ON contacts.inputtypeid = input.inputtypeid
  OR attendees_clean.inputtypeid = input.inputtypeid
LEFT JOIN tmc_van.tsm_tmc_contacttypes AS contacttypes
  ON contacts.contacttypeid = contacttypes.contacttypeid
)

, dedup1 AS (
SELECT *
FROM base
WHERE noshow_completes_rank = 1
)

, dedup2 AS (
SELECT *
  , ROW_NUMBER () OVER (PARTITION BY ea_eventid, event_shiftid, ea_attendeesid, attendee_status, status_createdby, status_creatorid, 
  TO_DATE(status_datecreated, 'YYYY-MM-DD') ORDER BY status_datemodified DESC)
    AS status_rank 
  /* For each event and person, I want to get rid of status changes that are from the same source and same day. For example,
  if someone as marked as Sched-Web from ThruText twice on the same day I only want one records. But I will include both records
  for if someone was marked as Sched-Web from ThruText and Mobilize on the same day, or if someone was marked as Sched-Web
  in Mobilize on two different days. */
FROM dedup1
)

SELECT 
  ea_eventid
  , entity
  , event_name
  , event_type
  , event_shiftid
  , event_shiftdate
  , event_city
  , event_state 
  , event_zip
  , mob_eventowner
  , dedup2.ea_attendeesid AS ea_userid
  , ea_firstname AS user_firstname
	, ea_lastname AS user_lastname
  , ea_attendeesemail AS user_email
  , ea_attendeesphone AS user_phone
  , ea_attendeescity AS user_city
	, ea_attendeesstate AS user_state
	, ea_attendeeszip AS user_zip
  , attendee_signupid AS ea_signupid
  , attendee_role AS signup_role
  , attendee_status AS signup_status
  , attendee_signupsstatusid AS ea_signupsstatusid
  , CASE WHEN status_createdby = 'OpenVPB' THEN 'Open VPB'
    ELSE status_createdby
      END AS status_createdby
    -- ^ Combine Open VPB categories
  , NVL( (tsm_tmc_users.lastname || ', '::varchar || tsm_tmc_users.firstname), coc_publicusers.publicusername ) 
      AS status_creatorname
    -- ^ Bringing in the last and first name of users/volunteers based on their EA user id.
  , status_datecreated
  , status_datemodified
  , ROW_NUMBER() OVER(PARTITION BY ea_eventid, event_shiftid, ea_userid ORDER BY status_datemodified DESC) AS most_recent_signup_status
    -- ^ For each user, event, and shift ranks the most recent sign up status
  , ROW_NUMBER () OVER (PARTITION BY ea_userid ORDER BY event_shiftdate DESC) AS latest_signup_rank
  	-- ^Adding in order to easily be able to filter for the latest record when I want a count of unique attendees, not all attendances.
  , ROW_NUMBER () OVER (PARTITION BY ea_userid ORDER BY event_shiftdate ASC) AS first_signup_rank
FROM dedup2
LEFT JOIN tmc_van.tsm_tmc_users
	ON tsm_tmc_users.userid = status_creatorid
LEFT JOIN tmc_van.coc_publicusers
	ON coc_publicusers.publicuserid = status_creatorid
WHERE status_rank = 1
;

-- Grant access:
GRANT SELECT ON coc_reporting.ea_eventsignups TO GROUP coc;
GRANT ALL ON coc_reporting.ea_eventsignups TO jshang, jharris1;
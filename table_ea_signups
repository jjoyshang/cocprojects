DROP TABLE IF EXISTS coc_reporting.ea_eventsignups;
CREATE TABLE coc_reporting.ea_eventsignups AS


/* Bringing event information from the EA Event Attendance table I made before, which has preformatted and cleaned event info. 
https://platform.civisanalytics.com/spa/#/scripts/sql/100953079 */
WITH events AS (
SELECT DISTINCT
  ea_eventid AS event_id
  , ea_eventname AS event_name
  , ea_eventtype AS event_type
FROM coc_reporting.ea_eventattendance
WHERE --ea_date BETWEEN '2021-10-01' AND '2021-11-30'
  ea_date BETWEEN '2020-09-01' AND (SELECT GETDATE ())
  -- ^ Filtering to the analysis window
  --event_id = '750036570'
  -- ^ event with multiple inputtype and contacts records, for checking
)


, attendees AS (
SELECT DISTINCT
  events.*
  , signups.eventshiftid AS event_shiftid
  , TO_TIMESTAMP(shifts.datetimeoffsetbegin, 'YYYY-MM-DD HH24:MI:SS') AS event_shiftdate
  /* For events with multiple shifts, the shift date is more accurate than the overall event date. 
  Formatting from varchar to timestamp. */
  , signups.eventsignupid AS attendee_signupid
  , signups.inputtypeid
  , signups.vanid
  , signups.eventrolename AS attendee_role
  , emails.email AS attendee_email
  /* Bringing in email so that in the next CTE I can filter out attendees with a COC email, indicating that they are 
  actually a staff member.*/
  , ROW_NUMBER () OVER (PARTITION BY event_id, event_shiftid, signups.vanid ORDER BY emails.datemodified DESC) AS emaildupe
  -- In the next CTE, used to only include the most recently modified email per person.
FROM events
LEFT JOIN tmc_van.coc_eventsignups AS signups
	ON events.event_id = signups.eventid
LEFT JOIN tmc_van.coc_eventshifts AS shifts
  ON signups.eventshiftid = shifts.eventshiftid
LEFT JOIN tmc_van.coc_contactsemails_mym AS emails
  ON emails.vanid = signups.vanid
)

, attendees_clean AS (
SELECT
  attendees.*
FROM attendees
WHERE emaildupe = 1
  AND attendee_email NOT LIKE '%@colorofchange.org'
    -- ^ Filter out COC emails, which we assume are staff.
  AND attendee_email NOT IN (
    'Meleemewilson@gmail.com'
    , 'jvharris02@gmail.com'
    , 'derrickquarles@yahoo.com'
    , 'cdpark81@gmail.com'
    , 'destanien@icloud.com'
    , 'michidael.ceard@gmail.com'
    , 'anazdin+3@gmail.com'
    , 'Salaah.muhammad@gmail.com'
    , 'carolinefreedman@gmail.com'
    , 'Sadie.Dean16@gmail.com'
    , 'candice@1kwomenstrong.com'
    , 'qmalone26@gmail.com'
    , 'naima.savage@gmail.com'
    , 'cgreer@texasaft.org'
    , 'ebony.hardyallen@gmail.com'
    , 'daniesha93@gmail.com'
    , 'passmorejr@gmail.com'
    , 'chuniq.inpower@gmail.com'
    , 'cpetty1992@gmail.com'
    , 'mnblackjoy@gmail.com'
  ) -- ^ Filter out personal emails of COC staff that we're seeing in EA
)

, base AS (
SELECT
  attendees_clean.*
  , statuses.eventsignupseventstatusid AS attendee_signupsstatusid
  , CASE
        WHEN statuses.createdby = '1960269' THEN 'Mobilize PAC'
        WHEN statuses.createdby = '1931224' THEN 'Mobilize c4'
        WHEN statuses.createdby = '1399286' THEN 'ThruText'
        WHEN statuses.createdby = '1781028' THEN 'Open VPB'
        ELSE NULL
      END AS temp_statuses_api
    -- ^ Reformatting statuses created by API to the platform name
  , NVL(contacttypes.contacttypename, temp_statuses_api, input.inputtypename)  AS status_createdby_temp
    /* ^ Cascading to the most specific name of how a status is created. The most specific is the contacttypename which shows
    the type of real contact, such as a One on One. The next the name of the API that created the status, if relevant. Last 
    is inputtypename which shows VPB, Bulk, Manual, or API. */
  , CASE WHEN temp_statuses_api IS NULL
      THEN NVL(contacts.canvassedby, statuses.createdby)
      ELSE NULL
    END AS status_creatorid
    /* ^ First, only taking user ids when the status creator is NOT an api. If it is an api, I will get the api id.
    Then cascading to the most specific user of which person created a status. The contacts.canvassedby shows who talked to the 
    member in a real contact, such as a One on One. The statuses.createdby shows the name of the EA user who added
    the status. */
  , CASE WHEN status_createdby_temp = 'API' AND status_creatorid IS NOT NULL THEN 'Manual'
      ELSE status_createdby_temp
      END AS status_createdby
    /* ^ Seeing in the backend that Manual statuses are erroneously being called API, when in EA they are manually added by a 
    user. This field is fixing this by saying, when the status is created by API but it was created by a user in EA, call
    it 'Manual' instead. */
  , statuses.eventstatusname AS attendee_status
  , NVL(contacts.datecanvassed, statuses.datecreated) AS status_datecreated
    /* ^ Cascading the most accurate date to least accurate. For a real contact, the contacts.datecanvassed will show when we
    talked to the member. If not, it will show the date the status was added.*/
  , statuses.datemodified AS status_datemodified
  , CASE WHEN 
      attendee_status IN ('No Show', 'Completed') THEN
        ROW_NUMBER () OVER (PARTITION BY event_id, event_shiftid, attendees_clean.vanid ORDER BY status_datemodified DESC)
      ELSE 1
    END AS noshow_completes_rank
      /* For No Shows or Completes, I only want the most recently updated status. I do not want duplicates if this has been
        changed or added multiple times.
     Rank them with the most recently updated as 1. Every other status is also 1.
      In the next CTE I fill filter this. */
FROM attendees_clean
LEFT JOIN tmc_van.coc_eventsignupsstatuses AS statuses
	ON attendees_clean.attendee_signupid = statuses.eventsignupid
LEFT JOIN tmc_van.coc_contactscontacts_mym AS contacts
  ON statuses.contactscontactid = contacts.contactscontactid
LEFT JOIN tmc_van.tsm_tmc_inputtypes AS input
  ON contacts.inputtypeid = input.inputtypeid
  OR attendees_clean.inputtypeid = input.inputtypeid
LEFT JOIN tmc_van.tsm_tmc_contacttypes AS contacttypes
  ON contacts.contacttypeid = contacttypes.contacttypeid
)

, dedup1 AS (
SELECT *
FROM base
WHERE noshow_completes_rank = 1
)

, dedup2 AS (
SELECT *
  , ROW_NUMBER () OVER (PARTITION BY event_id, event_shiftid, vanid, attendee_status, status_createdby, status_creatorid, 
  TO_DATE(status_datecreated, 'YYYY-MM-DD') ORDER BY status_datemodified DESC)
    AS status_rank 
  /* For each event and person, I want to get rid of status changes that are from the same source and same day. For example,
  if someone as marked as Sched-Web from ThruText twice on the same day I only want one records. But I will include both records
  for if someone was marked as Sched-Web from ThruText and Mobilize on the same day, or if someone was marked as Sched-Web
  in Mobilize on two different days. */
FROM dedup1
)

SELECT 
  event_id
  , event_name
  , event_type
  , event_shiftid
  , event_shiftdate
  , dedup2.vanid
  , attendee_email
  , attendee_role
  , attendee_status
  , attendee_signupid
  , attendee_signupsstatusid
  , CASE WHEN status_createdby = 'OpenVPB' THEN 'Open VPB'
    ELSE status_createdby
      END AS status_createdby
    -- ^ Combine Open VPB categories
  , NVL( (tsm_tmc_users.lastname || ', '::varchar || tsm_tmc_users.firstname), coc_publicusers.publicusername ) 
      AS status_creatorname
    -- ^ Bringing in the last and first name of users/volunteers based on their EA user id.
  , status_datecreated
  , status_datemodified
FROM dedup2
LEFT JOIN tmc_van.tsm_tmc_users
	ON tsm_tmc_users.userid = status_creatorid
LEFT JOIN tmc_van.coc_publicusers
	ON coc_publicusers.publicuserid = status_creatorid
WHERE status_rank = 1
;

-- Grant access:
GRANT SELECT ON coc_reporting.ea_eventsignups TO GROUP coc;
GRANT ALL ON coc_reporting.ea_eventsignups TO jshang, jharris1;